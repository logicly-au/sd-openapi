swagger: '2.0'
info:
  version: "0.0.1"
  title: "Primary Mental Health Care Minimum Dataset API"
tags:
- name: "organisations"
  description: "Operations on an organisation"
- name: "users"
  description: "Operations on a user"
- name: "clients"
  description: "Operations on a client (patient)"
- name: "providers"
  description: "Operations on a provider"
- name: "roles"
  description: "Operations on roles"
- name: "upload"
  description: "Operations associated with uploading data"
- name: "download"
  description: "Operations associated with downloading data"
paths:
  /organisations:
    get:
      tags:
      - "organisations"
      summary: "Searches for organisations in the MDS"
      operationId: "Organisations::search"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Search by name"
        required: false
        type: "string"
      - name: "key"
        in: "query"
        description: "Search by key"
        required: false
        type: "string"
      - name: "org_type_key"
        in: "query"
        description: "Search by organisation type"
        required: false
        type: "string"
      - name: "abn"
        in: "query"
        description: "Search by abn"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        description: "Search by status"
        required: false
        type: "string"
      - name: "state_code"
        in: "query"
        description: "Search by state"
        required: false
        type: "string"
      - name: "parent_organisation_key"
        in: "query"
        description: "Search by parent "
        required: false
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Organisation"
    post:
      tags:
      - "organisations"
      summary: "Add a new organisation to the minimum dataset"
      operationId: "Organisations::add"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Organisation object to be added to the MDS"
        required: true
        schema:
          $ref: "#/definitions/Organisation"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Organisation"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
  /organisations/{organisation_key}:
    get:
      tags:
      - "organisations"
      summary: "Find organisation by Key"
      description: "Returns a single organisation"
      operationId: "Organisations::getByKey"
      produces:
      - "application/json"
      parameters:
        - name: "organisation_key"
          in: "path"
          description: "Key of organisation to return"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/Organisation"
        400:
          description: "Invalid key supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Organisation not found"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "organisations"
      summary: "Update an existing organisation"
      operationId: "Organisations::update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "organisation_key"
        description: "Key of organisation that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Organisation object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Organisation"
      responses:
        400:
          description: "Invalid Key supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Organisation not found"
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Validation exception"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "organisations"
      summary: "Deletes an organisation"
      operationId: "Organisations::delete"
      produces:
      - "application/json"
      parameters:
      - name: "organisation_key"
        in: "path"
        description: "Key of the organisation to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid Key supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Organisation not found"
          schema:
            $ref: "#/definitions/Error"
  /clients:
    get:
      tags:
      - "clients"
      summary: "Searches for clients in the MDS"
      operationId: "Clients::search"
      produces:
      - "application/json"
      parameters:
      - name: "organisation_key"
        in: "query"
        description: "Organisation key to be used for filtering"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Client"
  /organisation/{organisation_key}/upload:
    get:
      tags:
      - "organisations"
      - "upload"
      summary: "Show the status of the most recent upload."
      operationId: "Organisations::Uploads::statusOfLast"
      produces:
      - "application/json"
      parameters:
      - name: "organisation_key"
        in: "path"
        description: "Organisation of the upload."
        required: true
        type: "string"
      responses:
        200:
          description: "Successful response."
          schema:
            $ref: "#/definitions/UploadStatus"
        400:
          description: "Invalid organisation_key"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Organisation not found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "organisations"
      - "upload"
      summary: "Bulk upload data to the PMHC MDS"
      operationId: "Organisations::Uploads::add"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "organisation_key"
        in: "path"
        description: "Organisation of the upload."
        required: true
        type: "string"
      - name: "client_file"
        in: formData
        description: The client file to upload
        required: true
        type: file
        minLength: 1
        maxLength: 5000000 # 5MB Do we want to limit the size of the file?
      - name: "episode_file"
        in: formData
        description: The episode file to upload
        required: true
        type: file
        minLength: 1
        maxLength: 5000000 # 5MB Do we want to limit the size of the file?
      - name: "service_file"
        in: formData
        description: The service file to upload
        required: true
        type: file
        minLength: 1
        maxLength: 5000000 # 5MB Do we want to limit the size of the file?
      - name: "outcome_file"
        in: formData
        description: The outcome file to upload
        required: true
        type: file
        minLength: 1
        maxLength: 5000000 # 5MB Do we want to limit the size of the file?
      - name: "provider_file"
        in: formData
        description: The provider file to upload
        required: true
        type: file
        minLength: 1
        maxLength: 5000000 # 5MB Do we want to limit the size of the file?
      responses:
        200:
          description: "Successful response."
          schema:
            $ref: "#/definitions/UploadStatus"
        400:
          description: "Invalid organisation_key"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Organisation not found"
          schema:
            $ref: "#/definitions/Error"
  /organisation/{organisation_key}/upload/{upload_id}:
    get:
      tags:
      - "organisations"
      - "upload"
      summary: "Show the status of the most recent upload."
      operationId: "Organisations::Uploads::status"
      produces:
      - "application/json"
      parameters:
      - name: "organisation_key"
        in: "path"
        description: "Organisation of the upload."
        required: true
        type: "string"
      - name: "upload_id"
        in: "path"
        description: "ID of the upload."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful response."
          schema:
            $ref: "#/definitions/UploadStatus"
        400:
          description: "Invalid upload_id or organisation_key"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Upload ID or Organisation not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "organisations"
      - "upload"
      summary: "Rollback an upload"
      operationId: "Organisations::Uploads::rollback"
      produces:
      - "application/json"
      parameters:
      - name: "organisation_key"
        in: "path"
        description: "Organisation of the upload."
        required: true
        type: "string"
      - name: "upload_id"
        in: "path"
        description: "ID of the upload."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful response."
          schema:
            $ref: "#/definitions/RollbackStatus"
        400:
          description: "Invalid upload_id or organisation_key"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Upload ID or Organisation not found"
          schema:
            $ref: "#/definitions/Error"
  /organisation/{organisation_key}/uploads:
    get:
      tags:
      - "organisations"
      - "upload"
      summary: "Get data on volumes of uploads for child organisations."
      operationId: "Organisations::Uploads::dataVolumes"
      produces:
      - "application/json"
      parameters:
      - name: "organisation_key"
        in: "path"
        description: "Organisation of the upload."
        required: true
        type: "string"
      responses:
        200:
          description: "Successful response."
          schema:
            $ref: "#/definitions/DataVolumes"
        400:
          description: "Invalid organisation_key"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Organisation not found"
          schema:
            $ref: "#/definitions/Error"
  /organisation/{organisation_key}/download/{file_type}:
    get:
      tags:
      - "organisations"
      - "download"
      summary: "Download data for the specified type."
      operationId: "Organisations::download"
      produces:
      - "text/csv"
      parameters:
      - name: "organisation_key"
        in: "path"
        description: "Organisation of the download."
        required: true
        type: "string"
      - name: "file_type"
        in: "path"
        description: "File type to be downloaded."
        required: true
        type: "string" # Would prefer $ref: "#/definitions/FileType" but haven't worked out how to do it
      - name: "start_date"
        in: "query"
        description: "The start date for the data."
        required: true
        type: "string"
        format: "date-time"
      - name: "end_date"
        in: "query"
        description: "The end date for the data."
        required: true
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "Successful response."
          schema:
            type: "file"
        400:
          description: "Invalid organisation_key or file type"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Organisation or File Type not found"
          schema:
            $ref: "#/definitions/Error"
  /providers:
    get:
      tags:
      - "providers"
      summary: "Searches for providers in the MDS"
      operationId: "Providers::search"
      produces:
      - "application/json"
      parameters:
      - name: "organisation_key"
        in: "query"
        description: "Organisation key to be used for filtering"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Provider"
  /users:
    get:
      tags:
      - "users"
      summary: "Searches for users in the MDS"
      operationId: "Users::search"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "Search by username"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "Search by name"
        required: false
        type: "string"
      - name: "email"
        in: "query"
        description: "Search by email"
        required: false
        type: "string"
      - name: "organisation_key"
        in: "query"
        description: "Search by organisation Key"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    post:
      tags:
      - "users"
      summary: "Add a new user to the minimum dataset"
      operationId: "Users::add"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "UserInvite object to be added to the MDS"
        required: true
        schema:
          $ref: "#/definitions/UserInvite"
      responses:
        202:
          description: "User invitation processing"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
  /users/current:
    get:
      tags:
      - "users"
      summary: "Current authenticated user"
      description: "Returns current user"
      operationId: "Users::getCurrent"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
  /users/invite-pingback:
    post:
      tags:
      - "users"
      summary: "Authentication system pingback when inviting users"
      description: "Adds user to MDS and applies content of JWT payload"
      operationId: "Users::invitePingback"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JWT payload"
        required: true
        schema:
          $ref: "#/definitions/JSONWebToken"
      responses:
        200:
          description: "Successful operation"
  /users/{UUID}:
    get:
      tags:
      - "users"
      summary: "Find user by UUID"
      description: "Returns a single user"
      operationId: "Users::getByUUID"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "UUID of user to return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid UUID supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "users"
      summary: "Update an existing user"
      operationId: "Users::update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "UUID"
        description: "UUID of user that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "User object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid UUID supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Validation exception"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "users"
      summary: "Deletes an user"
      operationId: "Users::delete"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "UUID of the user to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid UUID supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "UUID not found"
          schema:
            $ref: "#/definitions/Error"
  /users/{UUID}/preferences:
    get:
      tags:
      - "users"
      summary: "Find user preferences by UUID"
      description: "Returns a single user preference oject"
      operationId: "Users::Preferences::getByUUID"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "UUID of user preferences to return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/UserPreferences"
        400:
          description: "Invalid UUID supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "User preferences not found"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "users"
      summary: "Updates a user's preferences"
      operationId: "Users::Preferences::update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "UUID of the user preferences that needs to be updated"
        required: true
        type: "string"
      - name: "body"
        in: "body"
        description: "Preferences object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/UserPreferences"
      responses:
        400:
          description: "Invalid UUID supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "User Preferences not found"
          schema:
            $ref: "#/definitions/Error"
        405:
          description: "Validation exception"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "users"
      summary: "Deletes a user's preferences"
      operationId: "Users::Preferences::delete"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "UUID of the user preferences to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid UUID supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "UUID not found"
          schema:
            $ref: "#/definitions/Error"
  /users/{UUID}/organisations/{organisation_key}:
    get:
      tags:
      - "users"
      - "roles"
      - "organisations"
      summary: "Find user roles by UUID and organisationKey"
      description: "Returns a userRole object"
      operationId: "Users::Roles::getByUUIDandOrganisationKey"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "UUID of userRole to return"
        required: true
        type: "string"
      - name: "organisation_key"
        in: "path"
        description: "organisation_key of user role to return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/UserRole"
        400:
          description: "Invalid UUID or organisation_key supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "UserRole not found"
          schema:
            $ref: "#/definitions/Error"
  /users/{UUID}/roles/{role}:
    get:
      tags:
      - "users"
      - "roles"
      - "organisations"
      summary: "Find organisations by UUID and role"
      description: "Returns list of organisation objects"
      operationId: "Users::Organisations::getByUUIDandRole"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "UUID of userRole"
        required: true
        type: "string"
      - name: "role"
        in: "path"
        description: "role of userRole"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Organisation"
        400:
          description: "Invalid UUID or role supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "UserRole not found"
          schema:
            $ref: "#/definitions/Error"
  /users/{UUID}/organisations:
    get:
      tags:
      - "users"
      - "organisations"
      summary: "Find all organisations for this UUID"
      description: "Returns list of organisation objects"
      operationId: "Users::Organisations::getOrganisations"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "UUID of user"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Organisation"
        400:
          description: "Invalid UUID supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "UserRole not found"
          schema:
            $ref: "#/definitions/Error"
  /users/{UUID}/getUploadOrganisations:
    get:
      tags:
      - "users"
      - "roles"
      - "organisations"
      - "upload"
      summary: "Find leaf organisations for which UUID has the 'Upload' role"
      description: "Returns list of organisation objects"
      operationId: "Users::Organisations::Uploads::getLeaf"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "UUID of userRole"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Organisation"
        400:
          description: "Invalid UUID supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "UserRole not found"
          schema:
            $ref: "#/definitions/Error"
  /users/{UUID}/getUploadParentOrganisations:
    get:
      tags:
      - "users"
      - "roles"
      - "organisations"
      - "upload"
      summary: "Find immediate parent organisations for which UUID has the 'Upload' role"
      description: "Returns list of immediate parent organisation objects"
      operationId: "Users::Organisations::Uploads::getImmediateParents"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "UUID of userRole"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Organisation"
        400:
          description: "Invalid UUID supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "UserRole not found"
          schema:
            $ref: "#/definitions/Error"
  /users/{UUID}/organisations/{organisation_key}/roles:
    get:
      tags:
      - "uuid"
      - "roles"
      - "organisations"
      summary: "Find roles by user uuid and organisation key"
      description: "Returns list of role objects"
      operationId: "Users::Roles::get"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "UUID of the user"
        required: true
        type: "string"
      - name: "organisation_key"
        in: "path"
        description: "Key of organisation"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Invalid Organisation or User supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "OrganisationRoles not found"
          schema:
            $ref: "#/definitions/Error"
  /users/{UUID}/organisations/{organisation_key}/roles/{role}:
    post:
      tags:
      - "organisations"
      - "users"
      - "roles"
      summary: "Give a user a new role in an organisation"
      operationId: "Users::Roles::add"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "UUID of the user"
        required: true
        type: "string"
      - name: "role"
        in: "path"
        description: "Role to add"
        required: true
        type: "integer"
        format: "int64"
      - name: "organisation_key"
        in: "path"
        description: "Organisation to which to add the user role"
        required: true
        type: "string"
      responses:
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "organisations"
      - "users"
      - "roles"
      summary: "Deletes a role for a user in an organisation"
      operationId: "Users::Roles::delete"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "UUID of the user"
        required: true
        type: "string"
      - name: "role"
        in: "path"
        description: "Role of the user"
        required: true
        type: "integer"
        format: "int64"
      - name: "organisation_key"
        in: "path"
        description: "Organisation of the user"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "User Role not found"
          schema:
            $ref: "#/definitions/Error"
  /meta/atsi_status:
    get:
      tags:
      - "meta"
      summary: "Metadata for ATSI status"
      description: "Returns all data from atsi_status table"
      operationId: "Meta::atsi_status"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MetaBase"
  /meta/birth_country:
    get:
      tags:
      - "meta"
      summary: "Metadata for birth country"
      description: "Returns all data from birth_country table"
      operationId: "Meta::birth_country"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MetaBase"
  /meta/english_proficiency:
    get:
      tags:
      - "meta"
      summary: "Metadata for english proficiency"
      description: "Returns all data from english_proficiency table"
      operationId: "Meta::english_proficiency"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MetaBase"
  /meta/dob_status:
    get:
      tags:
      - "meta"
      summary: "Metadata for dob status"
      description: "Returns all data from dob_status table"
      operationId: "Meta::dob_status"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MetaBase"
  /meta/gender:
    get:
      tags:
      - "meta"
      summary: "Metadata for gender"
      description: "Returns all data from gender table"
      operationId: "Meta::gender"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MetaNameCode"
  /meta/language:
    get:
      tags:
      - "meta"
      summary: "Metadata for languages"
      description: "Returns all data from language table"
      operationId: "Meta::language"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MetaBase"
  /meta/role:
    get:
      tags:
      - "meta"
      summary: "Metadata for roles"
      description: "Returns all data from role table"
      operationId: "Meta::role"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MetaBase"
  /meta/state:
    get:
      tags:
      - "meta"
      summary: "Metadata for Australian states"
      description: "Returns all data from State table"
      operationId: "Meta::states"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MetaNameCode"
  /meta/organisation_status:
    get:
      tags:
      - "meta"
      summary: "Metadata for organisation status"
      description: "Returns all data from status table"
      operationId: "Meta::organisation_status"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MetaBase"
  /meta/organisation_type:
    get:
      tags:
      - "meta"
      summary: "Metadata for organisation types"
      description: "Returns all data from org_types table"
      operationId: "Meta::organisation_types"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MetaNameCode"
definitions:
  Organisation:
    type: "object"
    required:
    - "name"
    - "organisation_key"
    - "org_type_key"
    - "abn"
    - "status"
    - "state_code"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Test Primary Health Network"
      organisation_key:
        type: "string"
        example: "PHN01"
      org_type_key:
        type: "string"
      abn:
        type: "string"
      status:
        type: "string"
      state_code:
        type: "string"
      contact_user_id:
        type: "integer"
        format: "int64"
      parent_organisation_key:
        type: "string"
  Client:
    type: "object"
    required:
    - "organisation_key"
    - "client_key"
    - "SLK"
    - "gender_id"
    properties:
      id:
        type: "integer"
        format: "int64"
      organisation_key:
        type: "string"
      client_key:
        type: "string"
      SLK:
        type: "string"
      date_of_birth:
        type: "string"
        format: "date"
      date_of_birth_flag_id:
        type: "integer"
        format: "int64"
      gender_id:
        type: "integer"
        format: "int64"
      indig_status_id:
        type: "integer"
        format: "int64"
      country_of_birth:
        type: "string"
      mlsh:
        type: "string"
      prof_eng_id:
        type: "integer"
        format: "int64"
  Provider:
    type: "object"
    required:
    - "key"
    - "category_id"
    properties:
      id:
        type: "integer"
        format: "int64"
      key:
        type: "string"
      category_id:
        type: "integer"
        format: "int64"
      indig_status_id:
        type: "integer"
        format: "int64"
      status:
        type: "boolean"
  User:
    type: "object"
    required:
    - "uuid"
    - "username"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      uuid:
        type: "string"
      username:
        type: "string"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      mobile:
        type: "string"
      login_status:
        type: "boolean"
      last_logged_in:
        type: "string"
        format: "date-time"
      user_agent:
        type: "string"
  UserInvite:
    type: "object"
    required:
      - "surname"
      - "email"
      - "mobile"
      - "role"
      - "organisation_key"
    properties:
      surname:
        type: "string"
      given_name:
        type: "string"
      email:
        type: "string"
      mobile:
        type: "string"
      role:
        type: "string"
      organisation_key:
        type: "string"
  UserPreferences:
    type: "object"
    required:
    - "uuid"
    properties:
      uuid:
        type: "string"
      items_on_page:
        type: "integer"
        format: "int64"
        default: 20
  UserRole:
    type: "object"
    required:
    - "uuid"
    - "role"
    - "organisation_key"
    properties:
      uuid:
        type: "string"
      role:
        type: "string"
      organisation_key:
        type: "string"
  UploadStatus:
    type: "object"
    required:
    - "status"
    properties:
      upload_id:
        type: "integer"
        format: "int64"
      date:
         type: "string"
         format: "date-time"
      user:
         $ref: "#/definitions/User"
      status:
        $ref: "#/definitions/Status"
      files:
        type: "array"
        items:
          $ref: "#/definitions/FileStatus"
  FileStatus:
    type: "object"
    required:
    - "file_type"
    - "file_name"
    - "status"
    properties:
      file_type:
        $ref: "#/definitions/FileType"
      file_name:
        type: "string"
      status:
        $ref: "#/definitions/Status"
      warnings:
        type: "array"
        items:
          type: "string"
      errors:
        type: "array"
        items:
          type: "string"
      records_added:
        type: "integer"
        format: "int64"
      records_modified:
        type: "integer"
        format: "int64"
      records_deleted:
        type: "integer"
        format: "int64"
  FileType:
    type: "string"
    enum:
    - "client"
    - "episode"
    - "service_event"
    - "outcome"
    - "provider"
  Status:
    type: "string"
    enum:
    - no_upload
    - submitted
    - validating
    - validated_with_warnings
    - validated_with_errors
    - successfully_uploaded
  RollbackStatus:
    type: "object"
    required:
    - "status"
    properties:
      upload_id:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        enum:
        - no_previous_upload
        - rollback_unsuccessful
        - successfully_rolledback
      warnings:
        type: "array"
        items:
          type: "string"
      errors:
        type: "array"
        items:
          type: "string"
  DataVolumes:
    type: "object"
    required:
    - "organisation_key"
    properties:
      organisation_key:
        type: "string"
      uploads:
        type: "array"
        items:
          $ref: "#/definitions/UploadVolumes"
  UploadVolumes:
    type: "object"
    required:
    - "upload_id"
    properties:
      upload_id:
        type: "integer"
        format: "int64"
      date:
        type: "string"
        format: "date-time"
      # Fill in more
  Error:
    type: "string"
    # Rethink
  MetaBase:
    type: "object"
    required:
      - "id"
      - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  MetaNameCode:
    type: "object"
    required:
      - "id"
      - "name"
      - "code"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      code:
        type: "string"
  JSONWebToken:
    type: "object"
    required:
      - "token"
    properties:
      token:
        type: "string"
